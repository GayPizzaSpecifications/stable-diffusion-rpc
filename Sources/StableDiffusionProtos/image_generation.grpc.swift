//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: image_generation.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


///*
/// The image generation service, for generating images from loaded models.
///
/// Usage: instantiate `SdImageGenerationServiceClient`, then call methods of this protocol to make API calls.
public protocol SdImageGenerationServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: SdImageGenerationServiceClientInterceptorFactoryProtocol? { get }

  func generateImages(
    _ request: SdGenerateImagesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SdGenerateImagesRequest, SdGenerateImagesResponse>

  func generateImagesStreaming(
    _ request: SdGenerateImagesRequest,
    callOptions: CallOptions?,
    handler: @escaping (SdGenerateImagesStreamUpdate) -> Void
  ) -> ServerStreamingCall<SdGenerateImagesRequest, SdGenerateImagesStreamUpdate>
}

extension SdImageGenerationServiceClientProtocol {
  public var serviceName: String {
    return "gay.pizza.stable.diffusion.ImageGenerationService"
  }

  ///*
  /// Generates images using a loaded model.
  ///
  /// - Parameters:
  ///   - request: Request to send to GenerateImages.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func generateImages(
    _ request: SdGenerateImagesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SdGenerateImagesRequest, SdGenerateImagesResponse> {
    return self.makeUnaryCall(
      path: SdImageGenerationServiceClientMetadata.Methods.generateImages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateImagesInterceptors() ?? []
    )
  }

  ///*
  /// Generates images using a loaded model, providing updates along the way.
  ///
  /// - Parameters:
  ///   - request: Request to send to GenerateImagesStreaming.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func generateImagesStreaming(
    _ request: SdGenerateImagesRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (SdGenerateImagesStreamUpdate) -> Void
  ) -> ServerStreamingCall<SdGenerateImagesRequest, SdGenerateImagesStreamUpdate> {
    return self.makeServerStreamingCall(
      path: SdImageGenerationServiceClientMetadata.Methods.generateImagesStreaming.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateImagesStreamingInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension SdImageGenerationServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "SdImageGenerationServiceNIOClient")
public final class SdImageGenerationServiceClient: SdImageGenerationServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: SdImageGenerationServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: SdImageGenerationServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the gay.pizza.stable.diffusion.ImageGenerationService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: SdImageGenerationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct SdImageGenerationServiceNIOClient: SdImageGenerationServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: SdImageGenerationServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the gay.pizza.stable.diffusion.ImageGenerationService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: SdImageGenerationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///*
/// The image generation service, for generating images from loaded models.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol SdImageGenerationServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: SdImageGenerationServiceClientInterceptorFactoryProtocol? { get }

  func makeGenerateImagesCall(
    _ request: SdGenerateImagesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SdGenerateImagesRequest, SdGenerateImagesResponse>

  func makeGenerateImagesStreamingCall(
    _ request: SdGenerateImagesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<SdGenerateImagesRequest, SdGenerateImagesStreamUpdate>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension SdImageGenerationServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return SdImageGenerationServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: SdImageGenerationServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGenerateImagesCall(
    _ request: SdGenerateImagesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SdGenerateImagesRequest, SdGenerateImagesResponse> {
    return self.makeAsyncUnaryCall(
      path: SdImageGenerationServiceClientMetadata.Methods.generateImages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateImagesInterceptors() ?? []
    )
  }

  public func makeGenerateImagesStreamingCall(
    _ request: SdGenerateImagesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<SdGenerateImagesRequest, SdGenerateImagesStreamUpdate> {
    return self.makeAsyncServerStreamingCall(
      path: SdImageGenerationServiceClientMetadata.Methods.generateImagesStreaming.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateImagesStreamingInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension SdImageGenerationServiceAsyncClientProtocol {
  public func generateImages(
    _ request: SdGenerateImagesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SdGenerateImagesResponse {
    return try await self.performAsyncUnaryCall(
      path: SdImageGenerationServiceClientMetadata.Methods.generateImages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateImagesInterceptors() ?? []
    )
  }

  public func generateImagesStreaming(
    _ request: SdGenerateImagesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<SdGenerateImagesStreamUpdate> {
    return self.performAsyncServerStreamingCall(
      path: SdImageGenerationServiceClientMetadata.Methods.generateImagesStreaming.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateImagesStreamingInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct SdImageGenerationServiceAsyncClient: SdImageGenerationServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: SdImageGenerationServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: SdImageGenerationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol SdImageGenerationServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'generateImages'.
  func makeGenerateImagesInterceptors() -> [ClientInterceptor<SdGenerateImagesRequest, SdGenerateImagesResponse>]

  /// - Returns: Interceptors to use when invoking 'generateImagesStreaming'.
  func makeGenerateImagesStreamingInterceptors() -> [ClientInterceptor<SdGenerateImagesRequest, SdGenerateImagesStreamUpdate>]
}

public enum SdImageGenerationServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ImageGenerationService",
    fullName: "gay.pizza.stable.diffusion.ImageGenerationService",
    methods: [
      SdImageGenerationServiceClientMetadata.Methods.generateImages,
      SdImageGenerationServiceClientMetadata.Methods.generateImagesStreaming,
    ]
  )

  public enum Methods {
    public static let generateImages = GRPCMethodDescriptor(
      name: "GenerateImages",
      path: "/gay.pizza.stable.diffusion.ImageGenerationService/GenerateImages",
      type: GRPCCallType.unary
    )

    public static let generateImagesStreaming = GRPCMethodDescriptor(
      name: "GenerateImagesStreaming",
      path: "/gay.pizza.stable.diffusion.ImageGenerationService/GenerateImagesStreaming",
      type: GRPCCallType.serverStreaming
    )
  }
}

///*
/// The image generation service, for generating images from loaded models.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol SdImageGenerationServiceProvider: CallHandlerProvider {
  var interceptors: SdImageGenerationServiceServerInterceptorFactoryProtocol? { get }

  ///*
  /// Generates images using a loaded model.
  func generateImages(request: SdGenerateImagesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SdGenerateImagesResponse>

  ///*
  /// Generates images using a loaded model, providing updates along the way.
  func generateImagesStreaming(request: SdGenerateImagesRequest, context: StreamingResponseCallContext<SdGenerateImagesStreamUpdate>) -> EventLoopFuture<GRPCStatus>
}

extension SdImageGenerationServiceProvider {
  public var serviceName: Substring {
    return SdImageGenerationServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GenerateImages":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SdGenerateImagesRequest>(),
        responseSerializer: ProtobufSerializer<SdGenerateImagesResponse>(),
        interceptors: self.interceptors?.makeGenerateImagesInterceptors() ?? [],
        userFunction: self.generateImages(request:context:)
      )

    case "GenerateImagesStreaming":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SdGenerateImagesRequest>(),
        responseSerializer: ProtobufSerializer<SdGenerateImagesStreamUpdate>(),
        interceptors: self.interceptors?.makeGenerateImagesStreamingInterceptors() ?? [],
        userFunction: self.generateImagesStreaming(request:context:)
      )

    default:
      return nil
    }
  }
}

///*
/// The image generation service, for generating images from loaded models.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol SdImageGenerationServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: SdImageGenerationServiceServerInterceptorFactoryProtocol? { get }

  ///*
  /// Generates images using a loaded model.
  func generateImages(
    request: SdGenerateImagesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SdGenerateImagesResponse

  ///*
  /// Generates images using a loaded model, providing updates along the way.
  func generateImagesStreaming(
    request: SdGenerateImagesRequest,
    responseStream: GRPCAsyncResponseStreamWriter<SdGenerateImagesStreamUpdate>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension SdImageGenerationServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return SdImageGenerationServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return SdImageGenerationServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: SdImageGenerationServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GenerateImages":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SdGenerateImagesRequest>(),
        responseSerializer: ProtobufSerializer<SdGenerateImagesResponse>(),
        interceptors: self.interceptors?.makeGenerateImagesInterceptors() ?? [],
        wrapping: { try await self.generateImages(request: $0, context: $1) }
      )

    case "GenerateImagesStreaming":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SdGenerateImagesRequest>(),
        responseSerializer: ProtobufSerializer<SdGenerateImagesStreamUpdate>(),
        interceptors: self.interceptors?.makeGenerateImagesStreamingInterceptors() ?? [],
        wrapping: { try await self.generateImagesStreaming(request: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

public protocol SdImageGenerationServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'generateImages'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGenerateImagesInterceptors() -> [ServerInterceptor<SdGenerateImagesRequest, SdGenerateImagesResponse>]

  /// - Returns: Interceptors to use when handling 'generateImagesStreaming'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGenerateImagesStreamingInterceptors() -> [ServerInterceptor<SdGenerateImagesRequest, SdGenerateImagesStreamUpdate>]
}

public enum SdImageGenerationServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ImageGenerationService",
    fullName: "gay.pizza.stable.diffusion.ImageGenerationService",
    methods: [
      SdImageGenerationServiceServerMetadata.Methods.generateImages,
      SdImageGenerationServiceServerMetadata.Methods.generateImagesStreaming,
    ]
  )

  public enum Methods {
    public static let generateImages = GRPCMethodDescriptor(
      name: "GenerateImages",
      path: "/gay.pizza.stable.diffusion.ImageGenerationService/GenerateImages",
      type: GRPCCallType.unary
    )

    public static let generateImagesStreaming = GRPCMethodDescriptor(
      name: "GenerateImagesStreaming",
      path: "/gay.pizza.stable.diffusion.ImageGenerationService/GenerateImagesStreaming",
      type: GRPCCallType.serverStreaming
    )
  }
}
