//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: metadata.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `SdServerMetadataServiceClient`, then call methods of this protocol to make API calls.
public protocol SdServerMetadataServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: SdServerMetadataServiceClientInterceptorFactoryProtocol? { get }

  func getServerMetadata(
    _ request: SdGetServerMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SdGetServerMetadataRequest, SdGetServerMetadataResponse>
}

extension SdServerMetadataServiceClientProtocol {
  public var serviceName: String {
    return "gay.pizza.stable.diffusion.ServerMetadataService"
  }

  /// Unary call to GetServerMetadata
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServerMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getServerMetadata(
    _ request: SdGetServerMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SdGetServerMetadataRequest, SdGetServerMetadataResponse> {
    return self.makeUnaryCall(
      path: SdServerMetadataServiceClientMetadata.Methods.getServerMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServerMetadataInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension SdServerMetadataServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "SdServerMetadataServiceNIOClient")
public final class SdServerMetadataServiceClient: SdServerMetadataServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: SdServerMetadataServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: SdServerMetadataServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the gay.pizza.stable.diffusion.ServerMetadataService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: SdServerMetadataServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct SdServerMetadataServiceNIOClient: SdServerMetadataServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: SdServerMetadataServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the gay.pizza.stable.diffusion.ServerMetadataService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: SdServerMetadataServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol SdServerMetadataServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: SdServerMetadataServiceClientInterceptorFactoryProtocol? { get }

  func makeGetServerMetadataCall(
    _ request: SdGetServerMetadataRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SdGetServerMetadataRequest, SdGetServerMetadataResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension SdServerMetadataServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return SdServerMetadataServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: SdServerMetadataServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetServerMetadataCall(
    _ request: SdGetServerMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SdGetServerMetadataRequest, SdGetServerMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: SdServerMetadataServiceClientMetadata.Methods.getServerMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServerMetadataInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension SdServerMetadataServiceAsyncClientProtocol {
  public func getServerMetadata(
    _ request: SdGetServerMetadataRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SdGetServerMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: SdServerMetadataServiceClientMetadata.Methods.getServerMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServerMetadataInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct SdServerMetadataServiceAsyncClient: SdServerMetadataServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: SdServerMetadataServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: SdServerMetadataServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol SdServerMetadataServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getServerMetadata'.
  func makeGetServerMetadataInterceptors() -> [ClientInterceptor<SdGetServerMetadataRequest, SdGetServerMetadataResponse>]
}

public enum SdServerMetadataServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ServerMetadataService",
    fullName: "gay.pizza.stable.diffusion.ServerMetadataService",
    methods: [
      SdServerMetadataServiceClientMetadata.Methods.getServerMetadata,
    ]
  )

  public enum Methods {
    public static let getServerMetadata = GRPCMethodDescriptor(
      name: "GetServerMetadata",
      path: "/gay.pizza.stable.diffusion.ServerMetadataService/GetServerMetadata",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol SdServerMetadataServiceProvider: CallHandlerProvider {
  var interceptors: SdServerMetadataServiceServerInterceptorFactoryProtocol? { get }

  func getServerMetadata(request: SdGetServerMetadataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SdGetServerMetadataResponse>
}

extension SdServerMetadataServiceProvider {
  public var serviceName: Substring {
    return SdServerMetadataServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetServerMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SdGetServerMetadataRequest>(),
        responseSerializer: ProtobufSerializer<SdGetServerMetadataResponse>(),
        interceptors: self.interceptors?.makeGetServerMetadataInterceptors() ?? [],
        userFunction: self.getServerMetadata(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol SdServerMetadataServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: SdServerMetadataServiceServerInterceptorFactoryProtocol? { get }

  func getServerMetadata(
    request: SdGetServerMetadataRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SdGetServerMetadataResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension SdServerMetadataServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return SdServerMetadataServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return SdServerMetadataServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: SdServerMetadataServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetServerMetadata":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SdGetServerMetadataRequest>(),
        responseSerializer: ProtobufSerializer<SdGetServerMetadataResponse>(),
        interceptors: self.interceptors?.makeGetServerMetadataInterceptors() ?? [],
        wrapping: { try await self.getServerMetadata(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol SdServerMetadataServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getServerMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetServerMetadataInterceptors() -> [ServerInterceptor<SdGetServerMetadataRequest, SdGetServerMetadataResponse>]
}

public enum SdServerMetadataServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ServerMetadataService",
    fullName: "gay.pizza.stable.diffusion.ServerMetadataService",
    methods: [
      SdServerMetadataServiceServerMetadata.Methods.getServerMetadata,
    ]
  )

  public enum Methods {
    public static let getServerMetadata = GRPCMethodDescriptor(
      name: "GetServerMetadata",
      path: "/gay.pizza.stable.diffusion.ServerMetadataService/GetServerMetadata",
      type: GRPCCallType.unary
    )
  }
}
